สรุปความคืบหน้าการพัฒนาระบบบันทึกกิจกรรมด้วย SQLite และ MongoDB
1. ภาพรวมโครงการ
ระบบที่พัฒนามีเป้าหมายเพื่อบันทึกและจัดเก็บพฤติกรรมของมนุษย์ในโรงงานแบบอัตโนมัติ โดยรับข้อมูลจากกล้องวิดีโอ และวิเคราะห์ด้วยโมเดล AI (พัฒนาโดย Bas และ Chogun) เพื่อระบุพฤติกรรม เช่น การยกของหรือเคลื่อนย้ายสิ่งของ

ในส่วนของ Backend ซึ่งผู้พัฒนา (Sky) รับผิดชอบนั้น ได้จัดเก็บข้อมูลที่วิเคราะห์แล้วเข้าสู่ฐานข้อมูล เพื่อให้สามารถนำไปใช้ในการรายงานหรือวิเคราะห์ต่อไป โดยดำเนินการในสองแนวทาง คือ:

ระบบที่ใช้ฐานข้อมูล SQLite ในระยะเริ่มต้น

ระบบที่ใช้ MongoDB ร่วมกับการแสดงผลผ่าน Dashboard

2. การใช้งาน SQLite สำหรับการจัดเก็บพฤติกรรม
2.1 การออกแบบและพัฒนา
ใช้ SQLite สำหรับจัดเก็บข้อมูลภายในไฟล์ .db โดยไม่ต้องตั้งค่าเซิร์ฟเวอร์เพิ่มเติม

เชื่อมต่อผ่าน SQLAlchemy (ORM ของ Python) ซึ่งสามารถย้ายไปใช้ฐานข้อมูลอื่นในอนาคตได้ง่าย

2.2 โครงสร้างฐานข้อมูล
ตาราง activity_logs มีฟิลด์สำคัญ เช่น:

user_id, user_action, object_type, object_action

timestamp และ created_at เพื่อเก็บเวลาที่เกิดเหตุการณ์

2.3 การทำงานของระบบ
ไฟล์ db_setup.py: สร้างฐานข้อมูล

log_to_db.py: มีฟังก์ชัน log_activity() สำหรับเพิ่มข้อมูล

test_model_output_logging.py: ทดสอบโดยจำลองข้อมูลจากโมเดล AI แล้วบันทึกเข้าสู่ฐานข้อมูล

2.4 ผลการทดลอง
ทดสอบกับข้อมูลจำลอง: “ยกกล่อง” (inbound), “ลากลัง” (outbound)

ระบบสามารถบันทึกข้อมูลลงฐานข้อมูล SQLite ได้อย่างถูกต้อง

รองรับการใช้งานแบบเรียลไทม์โดยไม่ต้องเรียกผ่าน API

3. การทดลองใช้ MongoDB สำหรับระบบบันทึกและแสดงผล
3.1 วัตถุประสงค์
เพื่อรองรับการจัดเก็บและเรียกดูข้อมูลกิจกรรมแบบยืดหยุ่นมากขึ้น โดยใช้ MongoDB ควบคู่กับ Dashboard สำหรับการแสดงผล

3.2 การพัฒนาและโครงสร้างระบบ
ใช้ MongoDB เป็นฐานข้อมูลหลัก และสร้าง collection ชื่อ activity_logs

โครงสร้างข้อมูลมีฟิลด์คล้ายกับระบบ SQLite เช่น user_id, user_action, object_type, object_action, timestamp, created_at

3.3 ส่วนประกอบที่พัฒนา
activity_model.py: โมเดลข้อมูลด้วย MongoEngine

log_to_mongo.py: ฟังก์ชัน log_activity() สำหรับบันทึกข้อมูล

test_model_output_logging.py: ทดสอบการบันทึกและ Query ข้อมูล

dashboard.py: หน้า Dashboard สร้างด้วย Flask สำหรับแสดงผลและกรองข้อมูล

รองรับการใช้งานร่วมกับ MongoDB Compass

3.4 ความสามารถของ Dashboard
แสดงข้อมูลล่าสุดในรูปแบบตาราง

มีฟอร์มค้นหาตามเงื่อนไข เช่น user_id, object_type, วันที่

ใช้ Bootstrap + FontAwesome เพื่อความสวยงามและเหมาะสมกับงานขนส่ง

3.5 ผลการทดลอง
ระบบสามารถบันทึกข้อมูลกิจกรรมลง MongoDB ได้ถูกต้อง

Query ข้อมูลย้อนหลังตามเงื่อนไขต่าง ๆ ได้

แสดงผลบน Dashboard ได้ชัดเจน และจัดการข้อมูลได้ผ่าน MongoDB Compass

4. สรุปผลและแนวทางต่อไป
จากการทดลองทั้งสองระบบพบว่า:

SQLite เหมาะกับระบบที่ต้องการความเรียบง่าย ใช้งานแบบเบาและรวดเร็ว

MongoDB เหมาะสำหรับระบบที่ต้องการความยืดหยุ่น การจัดการข้อมูลแบบหลากหลาย และการแสดงผลผ่าน Dashboard

ทั้งสองระบบสามารถบันทึกข้อมูลจากโมเดล AI ได้แบบเรียลไทม์ ลดความผิดพลาดจากมนุษย์ และพร้อมสำหรับการพัฒนาต่อยอด เช่น การวิเคราะห์เชิงลึกหรือส่งออกข้อมูลในอนาคต